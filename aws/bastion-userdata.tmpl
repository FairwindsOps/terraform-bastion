#!/bin/bash


# Output information about what this script is doing.
function info {
  echo "user-data: $@"
}


info Getting the AWS availability zone and region
EC2_AVAIL_ZONE=`curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone`
EC2_REGION=`echo "$${EC2_AVAIL_ZONE:0:$${#EC2_AVAIL_ZONE}-1}"`
info The EC2 region is: $${EC2_REGION}
info The EC2 availability zone is: $${EC2_AVAIL_ZONE}


# RE: the UCF options below,
# see https://askubuntu.com/questions/146921/how-do-i-apt-get-y-dist-upgrade-without-a-grub-config-prompt
# Keep the old menu.lst file as it provides EC2 console output.
export UCF_FORCE_CONFFOLD=yes
export UCF_FORCE_CONFFNEW=yes
ucf --purge /boot/grub/menu.lst
export DEBIAN_FRONTEND=noninteractive
info Updating packages. . .
apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" update
apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" upgrade

info Installing packages needed on the bastion...
apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install awscli python unattended-upgrades

info The infra bucket is: ${infrastructure_bucket} and the S3 key is ${infrastructure_bucket_bastion_key}

info Looking for SSHd host keys to copy from S3. . .
aws --region $${EC2_REGION} s3 ls s3://${infrastructure_bucket}/${infrastructure_bucket_bastion_key}/sshd/ssh_host_rsa_key >/dev/null
if [ $? -eq 0 ] ; then
info Syncing host keys from ${infrastructure_bucket}/${infrastructure_bucket_bastion_key}
 	aws s3 --region $${EC2_REGION} sync s3://${infrastructure_bucket}/${infrastructure_bucket_bastion_key}/sshd/ /etc/ssh/
  chmod go= /etc/ssh/ssh_host_*_key
  info Restarting sshd to use new host keys
  systemctl restart ssh
else
  info Copying host keys to S3, this must be the first ever bastion instance using ${infrastructure_bucket}/${infrastructure_bucket_bastion_key}...
  for n in `ls -c1 /etc/ssh/ssh_host_*`;
  do
    aws --region $${EC2_REGION} s3 cp $n s3://${infrastructure_bucket}/${infrastructure_bucket_bastion_key}/sshd/
  done
fi

info Installing and configuring the CloudWatch Logs Agent
# Ref: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Install-CloudWatch-Agent.html
# THis config file can be generated using: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-config-wizard
info Generating a temporary cloudwatch-agent.conf file...
cat <<EOF >cloudwatch-agent.conf
{
	"logs": {
		"logs_collected": {
			"files": {
				"collect_list": [
					{
						"file_path": "/var/log/syslog",
						"log_group_name": "${bastion_name}",
						"log_stream_name": "{instance_id}"
					},
					{
						"file_path": "/var/log/auth.log",
						"log_group_name": "${bastion_name}",
						"log_stream_name": "{instance_id}"
					}
				]
			}
		}
	}
}
EOF
info Downloading the Cloud Watch Agent package
curl -Lo cloudwatch-agent.deb https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb && \
info Installing the CloudWatch Logs Agent package
dpkg -i cloudwatch-agent.deb && \
info "Configuring CloudWatch Agent. . ." && \
/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:cloudwatch-agent.conf -s && \
rm -f cloudwatch-agent.conf cloudwatch-agent.deb

info Setting up DNS registration on boot
info Downloading the cli53 tool
curl -Lo /usr/local/bin/cli53 https://github.com/barnybug/cli53/releases/download/0.8.13/cli53-linux-amd64
chmod +x /usr/local/bin/cli53
info Creating the /usr/local/bin/register-dns script using route53 zone ID ${zone_id}. . .
cat <<'EOF' >/usr/local/bin/register-dns
#!/bin/bash

zone_id="${zone_id}"
bastion_name="${bastion_name}"
public_ip=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
zone_name=$(cli53 list -f csv |grep ${zone_id}|cut -d, -f2)

echo $0 - registering $${bastion_name}.$${zone_name} to IP $${public_ip} using zone ID $${zone_id}...

cli53 rrcreate --replace \
$${zone_id} "$${bastion_name} 60 A $${public_ip}"

EOF
chmod +x /usr/local/bin/register-dns

info Installing the register-dns systemd service
cat <<EOF >/etc/systemd/system/register-dns.service
[Unit]
Description=Register the public IP address in DNS

[Service]
ExecStart=/usr/local/bin/register-dns
Type=oneshot
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target

EOF
systemctl daemon-reload
systemctl enable register-dns
systemctl start register-dns

info Configuring unattended upgrades in /etc/apt/apt.conf.d/50unattended-upgrades
cat <<EOF >>/etc/apt/apt.conf.d/50unattended-upgrades
// Options added by user-data and Terraform:
Unattended-Upgrade::Automatic-Reboot "true";
Unattended-Upgrade::Automatic-Reboot-Time "${unattended_upgrade_reboot_time}";
Unattended-Upgrade::MailOnlyOnError "true";
Unattended-Upgrade::Mail "${unattended_upgrade_email_recipient}";
${unattended_upgrade_additional_configs}
EOF

# Execute optional additional user data.
if [ "$${additional_user_data}x" == "x" ] ; then
  info "Executing additional_user_data. . ."
  ${additional_user_data}
  info "Finished executing additional_user_data. . ."
fi

# Add optional additional users and authorized_keys,
# specified in the additional_users module input as a list of maps.
# This variable is set to the rendering of all additional user templates,
# which are shell commands to be executed to create and configure the users.
${additional_user_templates}

# run the additional-external-users.sh script from s3
info Running the additional-external-users script -- check systemctl or journalctl additional-external-users to see output
aws s3 --region $${EC2_REGION} cp s3://${infrastructure_bucket}/${infrastructure_bucket_bastion_key}/additional-external-users /usr/local/bin/additional-external-users
info using etag ${infrastructure_bucket_additional_external_users_script_etag}
info using md5 ${additional-external-users-script-md5}
chmod +x /usr/local/bin/additional-external-users

info Installing the additional-external-users systemd service
cat <<EOF >/etc/systemd/system/additional-external-users.service
[Unit]
Description=Add all defined additional external users to the bastion

[Service]
ExecStart=/usr/local/bin/additional-external-users
Type=oneshot
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target

EOF
systemctl daemon-reload
systemctl enable additional-external-users
systemctl start additional-external-users

# Use a temporary variable to more easily compare the lowercase remove_root_access input.
rra=$(echo ${remove_root_access} |tr '[:upper:]' '[:lower:]')
if test $rra == "true" -o $rra == "yes" -o $rra == "1" ; then
  info Removing root access from the ubuntu user as remove_root_access is set to $rra
  # The ubuntu user has sudo access via both a group and configuration from cloudinit.
  rm -f /etc/sudoers.d/90-cloud-init-users
  deluser ubuntu sudo
else
  info Retaining root access as remove_root_access is set to \"$rra\"
fi

info Rebooting, if required by any kernel updates earlier
test -r /var/run/reboot-required && echo Reboot is required, doing that now... && shutdown -r now

