# Example usage for this terraform-bastion module.
# This example does not use all possible module inputs,
# please see [README.md](./README.md) for descriptions of all inputs.

module "bastion" {
  # Replace the `ref` below, with a `aws-vxxx` release from https://github.com/FairwindsOps/terraform-bastion/releases
  source = "git@github.com:FairwindsOps/terraform-bastion.git//aws?ref=v0.5.0"

  bastion_name = "kube-bastion"

  # This can also be set in the shell environment, using TF_VAR_infrastructure_bucket
  infrastructure_bucket = "CompanyName-kube-infrastructure"

  # This allows this module to use the same S3 bucket for multiple invocations.
  infrastructure_bucket_bastion_key = "default/bastion"
  route53_zone_id                   = "Zxxxxxxxxxxxxx"

  # This gets the VPC and subnet IDs from a separate VPC module,
  # but you can also specify `vpc-xxx` and `subnet-xxx` IDs directly.
  vpc_id = module.vpc.aws_vpc_id

  vpc_subnet_ids = module.vpc.aws_subnet_public_ids

  # This uses an SSH public key from the Terraform root module directory.
  ssh_public_key_file                = file("${path.root}/bastion_ssh.pub")"
  unattended_upgrade_email_recipient = "you@example.com"

  # Execute additional commands during User Data, for this bastion.
  additional_user_data = <<EOD
apt-get update && apt-get install -y zsh
EOD

  # Create an additional SSH user for Continuous Integration.
  # The SSH authorized_keys will not allow commands to be run.
  additional_users = [
    {
      login           = "ci"
      gecos           = "CI access to private Kubernetes API"
      authorized_keys = "command=\"echo This account is only for CI port forwarding, there is no shell access. Press ENTER when you are ready to disconnect. . .;read junk\" ssh-rsa xxxxx..."
    },
  ]
  # Add additional users using github usernames and their associated public SSH keys (see below config outside of module)
  additional_external_users = data.null_data_source.github_users.*.outputs

}

## additional configuration necessary for github_users functionality:
locals {
  github_ssh_keys = zipmap(var.github_users, data.http.githubkeys.*.body)
}

data "null_data_source" "github_users" {
  count = length(var.github_users)

  inputs = {
    login           = element(var.github_users, count.index)
    authorized_keys = element(data.http.githubkeys.*.body, count.index)
  }
}

data "http" "githubkeys" {
  count = length(var.github_users)

  url = "https://github.com/${element(var.github_users, count.index)}.keys"
}

variable "github_users" {
  type = "list"
}

## if using the github_users functionality, create a bastion.auto.tfvars that populates the github_users list like this:
github_users = [
  "user1",
  "user2",
  "user3"
]
